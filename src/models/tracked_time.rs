/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TrackedTime : TrackedTime worked time for an issue / pr

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrackedTime {
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "issue_id")]
  issue_id: Option<i64>,
  /// Time in seconds
  #[serde(rename = "time")]
  time: Option<i64>,
  #[serde(rename = "user_id")]
  user_id: Option<i64>
}

impl TrackedTime {
  /// TrackedTime worked time for an issue / pr
  pub fn new() -> TrackedTime {
    TrackedTime {
      created: None,
      id: None,
      issue_id: None,
      time: None,
      user_id: None
    }
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> TrackedTime {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> TrackedTime {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_issue_id(&mut self, issue_id: i64) {
    self.issue_id = Some(issue_id);
  }

  pub fn with_issue_id(mut self, issue_id: i64) -> TrackedTime {
    self.issue_id = Some(issue_id);
    self
  }

  pub fn issue_id(&self) -> Option<&i64> {
    self.issue_id.as_ref()
  }

  pub fn reset_issue_id(&mut self) {
    self.issue_id = None;
  }

  pub fn set_time(&mut self, time: i64) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i64) -> TrackedTime {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i64> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

  pub fn set_user_id(&mut self, user_id: i64) {
    self.user_id = Some(user_id);
  }

  pub fn with_user_id(mut self, user_id: i64) -> TrackedTime {
    self.user_id = Some(user_id);
    self
  }

  pub fn user_id(&self) -> Option<&i64> {
    self.user_id.as_ref()
  }

  pub fn reset_user_id(&mut self) {
    self.user_id = None;
  }

}



