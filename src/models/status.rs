/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Status : Status holds a single Status of a single Commit

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Status {
  #[serde(rename = "context")]
  context: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "creator")]
  creator: Option<::models::User>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "status")]
  status: Option<::models::StatusState>,
  #[serde(rename = "target_url")]
  target_url: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl Status {
  /// Status holds a single Status of a single Commit
  pub fn new() -> Status {
    Status {
      context: None,
      created_at: None,
      creator: None,
      description: None,
      id: None,
      status: None,
      target_url: None,
      updated_at: None,
      url: None
    }
  }

  pub fn set_context(&mut self, context: String) {
    self.context = Some(context);
  }

  pub fn with_context(mut self, context: String) -> Status {
    self.context = Some(context);
    self
  }

  pub fn context(&self) -> Option<&String> {
    self.context.as_ref()
  }

  pub fn reset_context(&mut self) {
    self.context = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Status {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_creator(&mut self, creator: ::models::User) {
    self.creator = Some(creator);
  }

  pub fn with_creator(mut self, creator: ::models::User) -> Status {
    self.creator = Some(creator);
    self
  }

  pub fn creator(&self) -> Option<&::models::User> {
    self.creator.as_ref()
  }

  pub fn reset_creator(&mut self) {
    self.creator = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Status {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> Status {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_status(&mut self, status: ::models::StatusState) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: ::models::StatusState) -> Status {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&::models::StatusState> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_target_url(&mut self, target_url: String) {
    self.target_url = Some(target_url);
  }

  pub fn with_target_url(mut self, target_url: String) -> Status {
    self.target_url = Some(target_url);
    self
  }

  pub fn target_url(&self) -> Option<&String> {
    self.target_url.as_ref()
  }

  pub fn reset_target_url(&mut self) {
    self.target_url = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> Status {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> Status {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



