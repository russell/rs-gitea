/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// User : User represents a user

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct User {
  /// URL to the user's avatar
  #[serde(rename = "avatar_url")]
  avatar_url: Option<String>,
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "email")]
  email: Option<String>,
  /// the user's full name
  #[serde(rename = "full_name")]
  full_name: Option<String>,
  /// the user's id
  #[serde(rename = "id")]
  id: Option<i64>,
  /// Is the user an administrator
  #[serde(rename = "is_admin")]
  is_admin: Option<bool>,
  /// User locale
  #[serde(rename = "language")]
  language: Option<String>,
  #[serde(rename = "last_login")]
  last_login: Option<String>,
  /// the user's username
  #[serde(rename = "login")]
  login: Option<String>
}

impl User {
  /// User represents a user
  pub fn new() -> User {
    User {
      avatar_url: None,
      created: None,
      email: None,
      full_name: None,
      id: None,
      is_admin: None,
      language: None,
      last_login: None,
      login: None
    }
  }

  pub fn set_avatar_url(&mut self, avatar_url: String) {
    self.avatar_url = Some(avatar_url);
  }

  pub fn with_avatar_url(mut self, avatar_url: String) -> User {
    self.avatar_url = Some(avatar_url);
    self
  }

  pub fn avatar_url(&self) -> Option<&String> {
    self.avatar_url.as_ref()
  }

  pub fn reset_avatar_url(&mut self) {
    self.avatar_url = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> User {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> User {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> User {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> User {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_is_admin(&mut self, is_admin: bool) {
    self.is_admin = Some(is_admin);
  }

  pub fn with_is_admin(mut self, is_admin: bool) -> User {
    self.is_admin = Some(is_admin);
    self
  }

  pub fn is_admin(&self) -> Option<&bool> {
    self.is_admin.as_ref()
  }

  pub fn reset_is_admin(&mut self) {
    self.is_admin = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: String) -> User {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&String> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_last_login(&mut self, last_login: String) {
    self.last_login = Some(last_login);
  }

  pub fn with_last_login(mut self, last_login: String) -> User {
    self.last_login = Some(last_login);
    self
  }

  pub fn last_login(&self) -> Option<&String> {
    self.last_login.as_ref()
  }

  pub fn reset_last_login(&mut self) {
    self.last_login = None;
  }

  pub fn set_login(&mut self, login: String) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: String) -> User {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&String> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

}



